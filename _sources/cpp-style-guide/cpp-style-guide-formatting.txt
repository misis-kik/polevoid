================================================================================
Форматрирование исходного текста программ
================================================================================

.. tip:: Настройте ваш редактор на автоматическое поддержание правильного форматирования.

.. tip:: Используйте инструментарий проверки форматирования исходных текстов.

--------------------------------------------------------------------------------
Кодировка исходных файлов UTF-8
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Запрещается использовать спецсимволы в исходных текстах
--------------------------------------------------------------------------------
.. attention:: Особое внимание обращать на вставку в исходный код символа 
   табуляции. 

.. tip:: При необходимости произведите настройку вашей IDE на автоматическую 
   замену табуляций соответствующим числом пробелов.

Количество пробелов, на которое заменяется табулятор при показе, является 
настройкой текстового редактора и может быть разным. Смешение в коде отступов 
с помощью нескольких пробелов и табуляций приводит к непредсказуемым визуальным 
нарушениям структуры отступов при просмотре.

Например, при показе табуляции в 2 пробела 

.. literalinclude:: tabexample.cpp
   :language: c++
   :tab-width: 2
   :linenos:

При показе табуляции в 3 пробела 

.. literalinclude:: tabexample.cpp
   :language: c++
   :tab-width: 3
   :linenos:

При показе табуляции в 4 пробела 

.. literalinclude:: tabexample.cpp
   :language: c++
   :tab-width: 4
   :linenos:

При показе табуляции в 8 пробелов 

.. literalinclude:: tabexample.cpp
   :language: c++
   :tab-width: 8
   :linenos:

--------------------------------------------------------------------------------
Избегайте длинных файлов.
--------------------------------------------------------------------------------
Длинными считаются файлы более 1000 строк.

--------------------------------------------------------------------------------
Избегайте длинных функций.
--------------------------------------------------------------------------------
Длинными считаются функции более 180 строк.

--------------------------------------------------------------------------------
Основной отступ составляет 2 пробела
--------------------------------------------------------------------------------

Тело составного блока размещайте с основным отступом относительно границ блока.

.. hint::

   .. code-block:: c++
   
      for (i = 0; i < n_elements; i += 1) {
        a[i] = 0;
      }

.. error::

   .. code-block:: c++
   
      for (i = 0; i < n_elements; i += 1) {
          a[i] = 0;
      }

Исключение составляют пространства имен, для которых отступ внутри блока не делается.

.. hint::

   .. code-block:: c++

       // 
       
       namespace common {
       class X {
           // ...
       };

       namespace nested_name_space {
       class Y {
           // ...
       };

       } // namespace nested_name_space
       } // common

.. error::

   .. code-block:: c++

      namespace comon {
          class X {
              // ...
          };

          namespace nested_name_space {
              class Y{
                  // ...
              };
          } // namespace nested_name_space
      } // common

--------------------------------------------------------------------------------
Обьявление и определение функции
--------------------------------------------------------------------------------

Тип возвращаемого значения указывайте на той же строке, что и имя функции.
Если хватает длинны строки, указывайте на той же строке, что и имя функции
* параметры функции;
* спецификатор noexept.

Тело определения функции начинайте с новой строки и завершайте на новой строке.

.. hint::

   .. code-block:: c++

      ReturnType ClassName::FunctionName(Type par_name1, Type par_name2) {
        DoSomething();
        // ...
      }

При необходимости переноса можно выравнивать по первому параметру.

.. hint::

   .. code-block:: c++
      
      ReturnType ClassName::ReallyLongFunctionName(Type par_name1, Type par_name2,
                                                   Type par_name3) {
        DoSomething();
        // ...
      }

Если параметров совсем много, то при переносе списка переменных используется 
удвоенный стандартный отступ (т.е. 4 пробела).

.. hint::

   .. code-block:: c++
      
      ReturnType LongClassName::ReallyReallyReallyLongFunctionName(
          Type par_name1,  // 4 space indent
          Type par_name2,
          Type par_name3) {
        DoSomething();  // стан2 space indent
        // ...
      }


--------------------------------------------------------------------------------
Оформление вызова функции
--------------------------------------------------------------------------------

Вызов функции оформляется с использованием минимальн возможного числа строк. 

.. hint::

   .. code-block:: c++

      value = DoSomething(argument1, argument2, argument3);      

Если все аргументы и скобки не удается разместить в одной строке, то используйте 
перенос строк с выравниванием по скобкам или с отступом в 4 пробела.

.. hint::

   .. code-block:: c++

      value = DoSomething(averyveryveryverylongargument1,
                          argument2, argument3);      

   .. code-block:: c++

      value = DoSomething(averyveryveryverylongargument1,
          argument2, argument3);      

Допустимо использование нестандартного форматирования, если оно сильно улучшает 
визуальное воспритие кода.

   .. code-block:: c++
      
      // Transform the widget by a 3x3 matrix.
      my_widget.Transform(x1, x2, x3,
                          y1, y2, y3,
                          z1, z2, z3);

--------------------------------------------------------------------------------
Оформление инструкции цикла for
--------------------------------------------------------------------------------

Цикл for оформляется в соответствии с общим принципом оформления блоков следующим образом.

.. code-block:: c++

   for ("initialization"; "condition"; "update") {
       "statements";
   }

.. hint::

   .. code-block:: c++

      for (ptrdiff_t i_page(0); i_page < n_page; i_page += 1) {
          // ...
      }

.. hint::

   .. code-block:: c++

      for (auto v : range) {
          summ += v;
      }

.. error::

   .. code-block:: c++

      for (ptrdiff_t i_page(0); i_page < n_page; i_page += 1)
      {
          // ...
      }

.. error::

   .. code-block:: c++

      for (auto v : range) 
      {
          summ += v;
      }

.. error::

   .. code-block:: c++

      for (auto v : range) { summ += v; }

Пустое и однострочное тело цикла оформляется по общему шаблону и обрамляется скобками.

.. hint::

   .. code-block:: c++

      for (auto v : range) {
      }

.. error::

   .. code-block:: c++

      for (ptrdiff_t i_page(0); i_page < n_page; i_page += 1);

--------------------------------------------------------------------------------
Оформление инструкции цикла while
--------------------------------------------------------------------------------

Цикл while оформлятеся в соответствии с общим принципом оформления блоков следующим образом.

.. code-block:: c++

   while ("condition") {
       "statements";
   }

.. hint:: 

   .. code-block:: c++

      while (should_read) {
          // ...
      }

.. error:: 

   .. code-block:: c++

      while (should_read) 
      {
          // ...
      }

Пустое и однострочное тело цикла оформляется по общему шаблону и обрамляется скобками.

.. hint:: 

   .. code-block:: c++

      while (should_read) {
          Read();
      }

.. error:: 

   .. code-block:: c++

      while (should_read);

.. error:: 

   .. code-block:: c++

      while (should_read)
          ;

--------------------------------------------------------------------------------
Оформление инструкции цикла do-while
--------------------------------------------------------------------------------

Цикл do - while оформлятеся в соответствии с общим принципом оформления блоков следующим образом.

.. attention:: Использовать цикл do-while не рекомендуется.

.. code-block:: c++

   do {
       "statements";
   } while ("condition");


.. hint::

   .. code-block:: c++

      do {
          Up();
          Go()
      } while (inside);

Однострочное тело цикла оформляется по общему шаблону и обрамляется скобками.

.. hint::

   .. code-block:: c++

      do {
          Move();
      } while (inside);

--------------------------------------------------------------------------------
Инструкция выбора switch оформляется следующим образом.
--------------------------------------------------------------------------------

.. hint:: ШАБЛОН оформления switch

   .. code-block:: c++

      switch ("condition") {
        case DEF: {
          "statements";
          break;
        }
        case XYZ: {
          "statements";
          break;
        }
        default: {
          "statements";
        }
      }
      

--------------------------------------------------------------------------------
Длина строки исходного файла ограничена 80 символами
--------------------------------------------------------------------------------
Используйте разрывы строк для более длинных строк.

Основание: реализация ограничения на длину строки происходит либо отбрасывание, 
либо переносом конца, при этом исходный текст становится трудным для восприятия. 
Отсутствие ограничения на длину строки у других разработчиков гарантировать 
невозможно. 80 является общепризнанным соглашением о количестве символов в строке 
редакторов, эмуляторов терминалов (консолей), принтеров и отладчиков.

.. todo:: перевести исключения из правил
   a comment line which is not feasible to split without harming readability, ease of cut
   and paste or auto-linking -- e.g. if a line contains an example command or a literal
   URL longer than 80 characters.
   a raw-string literal with content that exceeds 80 characters. Except for test code,
   such literals should appear near the top of a file.
   an include statement.
   a header guard
   a using-declaration

--------------------------------------------------------------------------------
Длинные строки разрывайте и переносите продолжение
--------------------------------------------------------------------------------
Делайте очевидным и хорошо заметным в коде разрыв строки. Выравнивайте новую 
строку в соответствии с предыдущей строкой. Базовое выравнивание продолжения 
соответсвует 2-м базовым отступам блока, т.е. 4 пробела.

.. note:: Если необходимость переноса вызвана слишком длинным выражением, то 
   часто лучше не переносить части такого выражения на следующие строки, а 
   разбить вычисление самого выражения на несколько простых шагов, каждое из 
   которых будет умещаться в одну строку. Читать и отлаживать такой код будет 
   проще.

При переносе длинных логических выражений логические операторы дожны стоять в 
начале перенесенной строки.

.. hint::

   .. code-block:: c++

      return Doc::Status::IS_OPENED == document.status()
              || line.isValid()
              || (line.id() == idNext && line.value().str().empty());

.. error::

   .. code-block:: c++

      return Doc::Status::IS_OPENED == document.status() ||
              line.isValid() ||
              (line.id() == idNext && line.value().str().empty());


.. todo:: Разрыв строки длинного выражения.

.. todo:: Разрыв длинного строкового литерала.

.. todo:: Разрыв длинной управляющей инструкции.

.. todo:: Разрыв длинного списка инициализации.


.. include:: cpp-style-guide-formatting-spaces.txt


--------------------------------------------------------------------------------
Размещайте не более одного оператора присваивания в строке
--------------------------------------------------------------------------------

.. hint::

   .. code-block:: c++

       a = 0;
       b = 0;

.. error::

   .. code-block:: c++

      a = b = 0;

--------------------------------------------------------------------------------
Каждая инструкция в своей строке
--------------------------------------------------------------------------------

Размещайте не более одной инструкции в одной строке (в строке не больше одной 
';', кроме случая цикла for).

.. hint::


   .. code-block:: c++

       int i_border_left(0);
       FindBorder(&i_border_left);


.. error::

   .. code-block:: c++

      int i_border_left(0); FindBorder(&i_border_left);


--------------------------------------------------------------------------------
Скобки в сложных выражениях
--------------------------------------------------------------------------------

Полагайтесь на приоритет только арифметических операторов. Используйте скобки 
для явного выделения частей выражений и указания приоритета вычислений.

.. hint::

   .. code-block:: c++

      a = b & (c | e) & d;

.. error::

    .. code-block:: c++

       a = b & c | e & d;

.. include:: cpp-style-guide-formatting-spaces.txt

--------------------------------------------------------------------------------
Нестандартное форматирование дожно существенно улучшать читаемость кода
--------------------------------------------------------------------------------
Используйте отличное от рекомендуемого форматирование только в том случае, если 
его использование существенно улучшает читаемость кода.

.. hint::

   .. code-block:: c++

      switch (phase) {
          case kPhasePre    : Start(phase, "Pre");    break;
          case kPhaseCommon : Start(phase, "Common"); break;
          case kPhasePos    : Start(phase, "Pos");    break;
          case default      : assert(!"Undefined type of phase");
      }
