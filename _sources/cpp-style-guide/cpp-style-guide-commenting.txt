:orphan:

================================================================================
Правила комментрирования
================================================================================

Лучший способ писать меньше комментариев - это писать самодокументирующий код.
Проще дать "говорящее" имя переменной и кратко обозначить ее назначение, чем 
использовать непонятное имя и писать подробные комменатрии.

Код, который вы пишите, вы пишите не для себя, а для того, кто будет работать с 
вашим кодом в следующий раз. Хотя, возможно, это будете и вы сами.

--------------------------------------------------------------------------------
Пишите все комментарии на русском языке.
--------------------------------------------------------------------------------

Не все, кто будет читать ваш код, могут владеть английским на должном уровне.

.. note:: 

   Это правило относится к учебному курсу. Если ваш заказчик или проектная группа 
   в качестве рабочего языка использует английский (или еще какой-то) - используйте 
   что положено.

--------------------------------------------------------------------------------
Используйте комментарии по прямому назначению
--------------------------------------------------------------------------------

Избегайте использования комментариев для отключения больших фрагментов кода. 

Если есть необходимость отключить фрагмент кода, то:
 * воспользйтесь препроцессором при соответсвующим комментировании;
 * постарайтесь избежать попадания таких фрагментов кода под систему хранения версий. 

:ПРИМЕР:

   .. code-block:: c++

      #if DISABLE_USER_CHECK  // disable for test
      struct UserLoginInfo
      {
         int m_userId; //< идентификатор пользователя АСУ
         TimeStamp m_lastLogin; //< метка времени последнего входа в систему
      };
      ...
      #endif // DISABLE_USER_CHECK

--------------------------------------------------------------------------------
Описывайте каждый файл исходного текста
--------------------------------------------------------------------------------

В начало каждого файла исходного текста вставляйте 
 * лицензионное соглашение
 * описание по следующему шаблону (имя самого файла, краткое описание, автор, дата создания).

:ШАБЛОН:

   .. code-block:: c++

      //\file   имя файла
      //\brief  краткое описание содержимого файла
      //\author ФИО автора
      //\date   дата создания файла

:ПРИМЕР:

   .. code-block:: c++

      //\file   codedialog.h
      //\brief  Класс диалога выбора входящего номера
      //\author Полевой Дмитрий
      //\date   04.09.2004

--------------------------------------------------------------------------------
Описывайте переменные 
--------------------------------------------------------------------------------

Описывайте в комментариях назначение переменных (как для обычных переменных, так и для полей классов).

.. 
   todo:: примеры кода или ссылки (:ref:`примеры комментирования переменных <coments-place>`)


--------------------------------------------------------------------------------
Описывайте каждую функцию 
--------------------------------------------------------------------------------

Комментируйте объявление каждой функции с использованием следующего шаблона.

:ШАБЛОН:

   .. code-block:: c++

      /**
      \brief краткое описание функции
      \param описание каждого параметра (имя [in/out] - описание)
      \retval TYPE, основные значения
      */

.. warning::

   Обратите внимание на

   - правильное написание тегов ('\brief', '\param', '\retval')
   - указание типа возвращаемого значения при описании результов
   - в таком формате описываются параметры функции (а не внутренние переменные)
   
:ПРИМЕР:

   .. code-block:: c++

      /**
      \brief Функция позволяющая пользователю выбрать в диалоге папку
      \param pUserPromt [in]     - текст, который будет отображаться над деревом
                                   папок (подсказка)
      \param pFilePath  [in/out] - папка. В диалоге выбранная папка сначала
                                   будет pPath. Если пользователь нажал "OK", то
                                   в szPath запишется выбранная пользователем
                                   папка
      \param lenPath    [in]     - размер буфера pFilePath
      \param pRootPath  [in]     - путь к корневой папке, в которой пользователь
                                   будет выбирать
      \retval bool - true, если удалось, иначе false
      */
      bool
      GetFolder(const char* pUserPromt, char* pPath,
                size_t int lenPath, const char* pRootPath);

--------------------------------------------------------------------------------
Размещайте коментарии рядом с кодом (перед блоком или в конце строки)
--------------------------------------------------------------------------------

Размещайте комментарии либо до комментируемого фрагмента, либо в конце комментируемой строки по следующему образцу.

:ШАБЛОН:

   .. code-block:: c++

      /// комментарий для документации в начале блока
      "statement"

   .. code-block:: c++

      "statement" ///< комментарий для документации в конце строки

.. note:: Старайтесь не смешивать эти способы внутри одного блока кода (например, при определении пользовательского типа).

Первый способ комментирования удобен для:

   - комментариев перед блоками кода;
   - длинных комментариев при объявлении/определении переменных.


:ПРИМЕР:

   .. code-block:: c++

      /// Главный цикл перебора компонент из хранилища.
      for (indexComp = 0; indexComp < MAX_COMP; ++indexComp)

:ПРИМЕР:

   .. code-block:: c++

      for (indexComp = 0; indexComp < MAX_COMP; ++indexComp)
      /// по компонентам хранилиша
      {
      }
      

:ПРИМЕР:

   .. code-block:: c++

      struct
      {
         /// идентификатор пользователя АСУ
         int m_userId;
         /// метка времени последнего входа в систему
         TimeStamp m_lastLogin;
      };

Второй способ комментирования наиболее удобен для коротких комментариев, например, при определении переменных.

:ПРИМЕР:

   .. code-block:: c++

      struct UserLoginInfo
      {
         int m_userId; //< идентификатор пользователя АСУ
         TimeStamp m_lastLogin; //< метка времени последнего входа в систему
      };

:ПРИМЕР:

   .. code-block:: c++

      int userId(0); ///< идентификатор пользователя


--------------------------------------------------------------------------------
Пишите комментарии с отступом комментируемого кода
--------------------------------------------------------------------------------

Комментарии пишутся с отступом комментируемого кода.

.. table::

   =============  ==============================================================
   ПРАВИЛЬНО      .. code-block:: c++

                     // Найдем среднее значение
                     for (int iRow(0); iRow != nRow;
                         ++iRow)
                     // По строкам таблицы.
                     {
                         // Накопитель суммы по строке.
                         int totalValue(0);
                         "statements";
                     }

   -------------  --------------------------------------------------------------
   НЕПРАВИЛЬНО    .. code-block:: c++

                     // Найдем среднее значение
                     for (int iRow(0); iRow != nRow;
                         ++iRow)
                         // По строкам таблицы.
                     {
                     // Накопитель суммы по строке.
                         int totalValue(0);
                         "statements";
                     }
   =============  ==============================================================

--------------------------------------------------------------------------------
Пишите проще код, а не увеличивайте объем комментариев
--------------------------------------------------------------------------------

Наличие комментариев не освобождает от ответственности за излишне сложный код — 
изощренный код должен быть переписан, а не задокументирован.

